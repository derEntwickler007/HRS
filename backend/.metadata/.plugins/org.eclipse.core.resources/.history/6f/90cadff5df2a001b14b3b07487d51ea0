package com.ujwal.HRS.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ujwal.HRS.dao.BookingDao;
import com.ujwal.HRS.dao.RoomDao;
import com.ujwal.HRS.entity.Booking;
import com.ujwal.HRS.entity.Room;
import com.ujwal.HRS.entity.User;


@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/hrs")
public class BookingController {
	@Autowired
	private BookingDao bookingDao;
	
	@Autowired
	private RoomDao roomDao;
	
	@Autowired
	private EntityManager entity;

	
	@PostMapping("booking")
	public Booking saveUser(@RequestBody Booking book) {
		return bookingDao.save(book);
	}
	
	@GetMapping("booking/getAll")
	public List<Booking> getAll(){
		return bookingDao.getAllBookings();
	}
	
	public Room getAvailableRooms(Date date) {
		Booking booking=new Booking();
		List<Booking> bookings=bookingDao.getAllBookings();
		List<Integer> roomIds=new ArrayList<Integer>();
		for(Booking book:bookings) {
			if(book.getCheck_in().before(date)) {
				roomIds.add(book.getRoom().getId());
			}
		}
		
		CriteriaBuilder cb = entity.getCriteriaBuilder();
        CriteriaQuery<Room> cq = cb.createQuery(Room.class);
 
        Root<Room> root = cq.from(Room.class);
        Predicate authorNamePredicate = cb.in(roomIds);
        cq.where(authorNamePredicate);
 
        TypedQuery<Room> query = entity.createQuery(cq);
        return (Room) query.getResultList();
		
		List<Room> room=roomDao.getAllRoom();
		for(Room room1:room) {
			
		}
		return null;
	}
}
